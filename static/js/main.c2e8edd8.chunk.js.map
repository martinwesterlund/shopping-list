{"version":3,"sources":["assets/spiral.svg","contexts/ItemContext.js","components/ItemForm.js","components/ItemList.js","components/BoughtItems.js","components/HelpBtn.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ItemContext","createContext","ItemContextProvider","props","useState","JSON","parse","localStorage","getItem","items","setItems","boughtItems","setBoughtItems","useEffect","console","log","setItem","stringify","Provider","value","addItem","itemName","id","uuidv4","moveItem","filter","item","length","boughtItem","removeItem","children","ItemForm","useContext","setItemName","className","autoComplete","onSubmit","e","preventDefault","type","placeholder","onChange","target","required","icon","faPlusCircle","ItemList","class","faShoppingCart","map","onDoubleClick","key","faTrashAlt","onClick","BoughtItems","faCheck","HelpBtn","faQuestionCircle","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c2e8edd8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spiral.2a9f23ed.svg\";","import React, { createContext, useState, useEffect } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport const ItemContext = createContext();\n\nconst ItemContextProvider = (props) => {\n  const [items, setItems] = useState(JSON.parse(localStorage.getItem(\"items\")));\n  const [boughtItems, setBoughtItems] = useState(\n    JSON.parse(localStorage.getItem(\"boughtItems\"))\n  );\n\n  const addItem = (itemName) => {\n    items\n      ? setItems([...items, { id: uuidv4(), itemName }])\n      : setItems([{ id: uuidv4(), itemName }]);\n  };\n  const moveItem = (id) => {\n    if (items.filter((item) => item.id === id).length > 0) {\n      let boughtItem = items.filter((item) => item.id === id)[0];\n      boughtItems ? setBoughtItems([...boughtItems, { id, itemName: boughtItem.itemName }]) : setBoughtItems([{ id, itemName: boughtItem.itemName }]);\n      setItems(items.filter((item) => item.id !== id));\n    } else {\n      let item = boughtItems.filter((item) => item.id === id)[0];\n      setItems([...items, { id, itemName: item.itemName }]);\n      setBoughtItems(boughtItems.filter((item) => item.id !== id));\n    }\n  };\n  const removeItem = (id) => {\n    if (items.filter((item) => item.id === id).length > 0) {\n      setItems(items.filter((item) => item.id !== id));\n    } else {\n      setBoughtItems(boughtItems.filter((item) => item.id !== id));\n    }\n  };\n\n  useEffect(() => {\n    console.log('Sparar datan')\n    localStorage.setItem(\"items\", JSON.stringify(items));\n    localStorage.setItem(\"boughtItems\", JSON.stringify(boughtItems));\n  });\n  \n  return (\n    <ItemContext.Provider\n      value={{\n        items,\n        boughtItems,\n        addItem,\n        moveItem,\n        removeItem,\n      }}\n    >\n      {props.children}\n    </ItemContext.Provider>\n  );\n};\n\nexport default ItemContextProvider;\n","import React, { useContext, useState } from 'react'\nimport {ItemContext} from '../contexts/ItemContext'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nimport { faPlusCircle} from '@fortawesome/free-solid-svg-icons'\nconst ItemForm = () => {\n    const { addItem } = useContext(ItemContext)\n    const [itemName, setItemName] = useState('')\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        addItem(itemName)\n        setItemName('')\n    }\n    return (\n        <form className='form' autoComplete=\"off\" onSubmit={handleSubmit}>\n            <input id='add-field' type='text' placeholder='Produkt' value={itemName} onChange={(e) => setItemName(e.target.value)} required/>\n            {/* <input id='submit-btn' type='submit' value='LÃ¤gg till'/> */}\n            <button id='submit-btn' type='submit' ><FontAwesomeIcon id=\"add-icon\" icon={faPlusCircle} /></button>\n            \n        </form>\n    )\n}\n\nexport default ItemForm","import React, { useContext } from \"react\";\nimport { ItemContext } from \"../contexts/ItemContext\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport {\n  faList,\n  faTrashAlt,\n  faAngleDoubleRight,\n  faShoppingCart\n} from \"@fortawesome/free-solid-svg-icons\";\nimport ItemForm from \"./ItemForm\";\nimport { Spiral } from \"./Spiral\";\nconst ItemList = () => {\n  const { items, removeItem, moveItem } = useContext(ItemContext);\n  return items ? (\n    <div id=\"item-view\">\n      <div className=\"navbar\"><FontAwesomeIcon class=\"navbar-icon\" icon={faShoppingCart} /></div>\n      <div className=\"item-list\">\n        {/* <FontAwesomeIcon class='bg-icon' icon={faList} /> */}\n        {/* <Spiral></Spiral> */}\n        <div className=\"item-container\">\n        {items.map((item) => {\n          return (\n            <div\n              onDoubleClick={() => moveItem(item.id)}\n              className=\"item\"\n              key={item.id}\n            >\n              {item.itemName}\n              <FontAwesomeIcon\n                className=\"trash\"\n                icon={faTrashAlt}\n                onClick={() => removeItem(item.id)}\n              />\n            </div>\n          );\n        })}\n        </div>\n      </div>\n      <ItemForm></ItemForm>\n    </div>\n  ) : (\n    <div className=\"item-list\">\n      \n    </div>\n  );\n};\n\nexport default ItemList;\n","import React, { useContext } from \"react\";\nimport { ItemContext } from \"../contexts/ItemContext\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport { faTrashAlt, faCheck} from \"@fortawesome/free-solid-svg-icons\";\n\nconst BoughtItems = () => {\n  const { boughtItems, moveItem, removeItem } = useContext(ItemContext);\n  return boughtItems ? (\n    <div id=\"bought-items-view\">\n      <div className=\"navbar\"><FontAwesomeIcon class=\"navbar-icon\" icon={faCheck} /></div>\n      <div className=\"bought-items-list\">\n        <div className=\"item-container\">\n          {/* <FontAwesomeIcon class=\"bg-icon\" icon={faShoppingCart} /> */}\n          {boughtItems.map((item) => {\n            return (\n              <div\n                onDoubleClick={() => moveItem(item.id)}\n                className=\"item\"\n                key={item.id}\n              >\n                {item.itemName}\n                <FontAwesomeIcon\n                  className=\"trash\"\n                  icon={faTrashAlt}\n                  onClick={() => removeItem(item.id)}\n                />\n              </div>\n            );\n          })}\n        </div>\n      </div>\n      <div className=\"form\"></div>\n    </div>\n  ) : (\n    <div id=\"bought-items-view\">\n      <div className=\"navbar\"><FontAwesomeIcon class=\"navbar-icon\" icon={faCheck} /></div>\n      <div className=\"bought-items-list\"></div>\n      <div className=\"form\"></div>\n    </div>\n  );\n};\n\nexport default BoughtItems;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\n\nexport default function HelpBtn() {\n  return <FontAwesomeIcon class=\"help-btn\" icon={faQuestionCircle} />;\n}\n","import React from \"react\";\nimport SwipeableViews from 'react-swipeable-views';\nimport ItemContextProvider from \"./contexts/ItemContext\";\nimport Navbar from \"./components/Navbar\";\nimport ItemList from \"./components/ItemList\";\nimport ItemForm from \"./components/ItemForm\";\nimport BoughtItems from \"./components/BoughtItems\";\nimport HelpBtn from \"./components/HelpBtn\";\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      \n      <HelpBtn></HelpBtn>\n       <ItemContextProvider>\n        {/* <Navbar></Navbar> */}\n        \n        <SwipeableViews>\n        <ItemList></ItemList>\n        <BoughtItems></BoughtItems>\n        \n        </SwipeableViews>\n        \n        {/*<SwipeableViews>\n          <ItemList></ItemList>\n          <BoughtItems></BoughtItems>\n          </SwipeableViews>\n        <ItemForm></ItemForm>*/}\n      </ItemContextProvider> \n      {/* <main className='flexbox'>\n        <Board id='board-1' className='board'>\n          <Card id='card-1' className='card' draggable='true'>\n            <p>Card One</p>\n          </Card>\n        </Board>\n\n        <Board id='board-2' className='board'>\n          <Card id='card-2' className='card' draggable='true'>\n            <p>Card Two</p>\n          </Card>\n        </Board>\n      </main> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}